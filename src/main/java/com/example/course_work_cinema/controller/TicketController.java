package com.example.course_work_cinema.controller;import com.example.course_work_cinema.entity.Seance;import com.example.course_work_cinema.entity.Ticket;import com.example.course_work_cinema.service.SeanceService;import com.example.course_work_cinema.service.TicketService;import com.example.course_work_cinema.utils.TicketUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.SessionAttributes;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import javax.swing.text.html.Option;import java.util.Date;import java.util.Optional;@Controller@SessionAttributes("seance")public class TicketController {    @Autowired    private SeanceService seanceService;    @Autowired    private TicketService ticketService;    @Autowired    private TicketUtils ticketUtils;    @RequestMapping("ticket-page")    public String ticketPage(Model model, @RequestParam String ticketId) {        Optional<Ticket> ticket = ticketService.findById(Integer.parseInt(ticketId));        Optional<Seance> seance = seanceService.findById(ticket.get().getSeanceId().getSeanceId());        model.addAttribute("ticket", ticket.get());        model.addAttribute("seance", seance.get());        return "ticket-page";    }    @RequestMapping("add-ticket")    public String addTicket(@ModelAttribute Ticket ticket, Model model, @RequestParam String seance) {        Optional<Seance> seance1 = seanceService.findById(Integer.parseInt(seance));        model.addAttribute("seance", seance1.get());        return "add-ticket";    }    @RequestMapping("process-ticket")    public String processTicket(@ModelAttribute Ticket ticket, @RequestParam String seanceId, RedirectAttributes redirectAttributes) {        ticket.setPurchaseDate(new Date());        System.out.println("TICKET: " + ticket);        if (!ticketUtils.isSeatTaken(ticket)) {            redirectAttributes.addFlashAttribute("error", "Current seat is taken");            return "redirect:add-ticket?seance=" + ticket.getSeanceId().getSeanceId();        }        ticketService.save(ticket);        return "redirect:seance-page?seance=" + ticket.getSeanceId().getSeanceId();    }    @RequestMapping("update-ticket")    public String updateTicket(@RequestParam String ticketId, Model model) {        Optional<Ticket> ticket = ticketService.findById(Integer.parseInt(ticketId));        model.addAttribute("ticket", ticket.get());        model.addAttribute("seance", ticket.get().getSeanceId());        return "add-ticket";    }    @RequestMapping("delete-ticket")    public String deleteTicket(@RequestParam String ticketId) {        Optional<Ticket> ticket = ticketService.findById(Integer.parseInt(ticketId));        int seanceId = ticket.get().getSeanceId().getSeanceId();        ticketService.deleteById(ticket.get().getTicketId());        System.out.println("Return seance id: " + seanceId);        return "redirect:seance-page?seance=" + seanceId;    }}