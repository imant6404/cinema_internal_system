package com.example.course_work_cinema.controller;import com.example.course_work_cinema.entity.Movie;import com.example.course_work_cinema.entity.Seance;import com.example.course_work_cinema.entity.Ticket;import com.example.course_work_cinema.model.SortModel;import com.example.course_work_cinema.service.HallServiceImpl;import com.example.course_work_cinema.service.MovieServiceImpl;import com.example.course_work_cinema.service.SeanceServiceImpl;import com.example.course_work_cinema.service.TicketService;import com.example.course_work_cinema.utils.SeanceUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.propertyeditors.CustomDateEditor;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Optional;@Controller@SessionAttributes({"hall", "movie"})public class SeanceController {    @Autowired    private HallServiceImpl hallService;    @Autowired    private MovieServiceImpl movieService;    @Autowired    private SeanceServiceImpl seanceService;    @Autowired    private SeanceUtils seanceUtils;    @Autowired    private TicketService ticketService;    @RequestMapping({"seances", ""})    public String seances(Model model) {        List<Seance> seanceList = seanceService.findAll();        List<Movie> movieList = movieService.findAll();        model.addAttribute("seanceList", seanceList);        model.addAttribute("movieList", movieList);        model.addAttribute("sortModel", new SortModel());        return "seances";    }    @RequestMapping("process-sort")    public String processSort(@Valid @ModelAttribute SortModel sortModel, BindingResult bindingResult, Model model) {        if(bindingResult.hasErrors()) {            System.out.println("ERROR");            System.out.println(bindingResult.getAllErrors());            return "seances";        }        List<Seance> seanceList = seanceUtils.sort(sortModel);        List<Movie> movieList = movieService.findAll();        model.addAttribute("seanceList", seanceList);        model.addAttribute("movieList", movieList);        return "seances";    }    @RequestMapping("seance-page")    public String seancePage(Model model, @RequestParam String seance) {        System.out.println("SEANCE");        List<Ticket> ticketList = ticketService.findTicketsBySeance(Integer.parseInt(seance));        Optional<Seance> seancePage = seanceService.findById(Integer.parseInt(seance));        model.addAttribute("ticketList", ticketList);        model.addAttribute("seance", seancePage.get());        return "seance-page";    }    @RequestMapping("add-seance")    public String addSeance(@ModelAttribute Seance seance, Model model) {        model.addAttribute("hall", hallService.findAll());        model.addAttribute("movies", movieService.findAll());        return "add-seance";    }    @RequestMapping("process-seance")    public String processSeance(@Valid @ModelAttribute Seance seance, BindingResult bindingResult, Model model) {        if (bindingResult.hasErrors()) {            return "add-seance";        }        if(!seanceUtils.isValidToCreateSeance(seance)) {            model.addAttribute("error", "Seance time is taken, please choose another time.");            model.addAttribute("seance", seance);            return "add-seance";        }        seanceService.save(seance);        return "redirect:seances";    }    @RequestMapping("delete-seance")    public String deleteSeance(@RequestParam String seanceId) {        seanceService.deleteById(Integer.parseInt(seanceId));        return "redirect:seances";    }    @RequestMapping("update-seance")    public String updateSeance(Model model, @RequestParam String seanceId) {        Optional<Seance> seance = seanceService.findById(Integer.parseInt(seanceId));        model.addAttribute("seance", seance.get());        model.addAttribute("hall", hallService.findAll());        model.addAttribute("movies", movieService.findAll());        return "add-seance";    }    @InitBinder    public void initBinder(WebDataBinder binder) {        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");        CustomDateEditor customDateEditor = new CustomDateEditor(simpleDateFormat, true);        binder.registerCustomEditor(Date.class, "seanceDate", customDateEditor);        SimpleDateFormat simpleTimeFormat = new SimpleDateFormat("HH:mm");        CustomDateEditor customTimeEditor = new CustomDateEditor(simpleTimeFormat, true);        binder.registerCustomEditor(Date.class, "seanceTime", customTimeEditor);        SimpleDateFormat simpleDateFormatFrom = new SimpleDateFormat("dd-MM-yyyy");        CustomDateEditor customDateEditorFrom = new CustomDateEditor(simpleDateFormatFrom, true);        binder.registerCustomEditor(Date.class, "from", customDateEditorFrom);        SimpleDateFormat simpleDateFormatTo = new SimpleDateFormat("dd-MM-yyyy");        CustomDateEditor customDateEditorTo = new CustomDateEditor(simpleDateFormatTo, true);        binder.registerCustomEditor(Date.class, "to", customDateEditorTo);    }}