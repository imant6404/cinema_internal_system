package com.example.course_work_cinema.utils;import com.example.course_work_cinema.entity.Seance;import com.example.course_work_cinema.model.SortModel;import com.example.course_work_cinema.service.MovieService;import com.example.course_work_cinema.service.SeanceServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.ArrayList;import java.util.Date;import java.util.List;@Componentpublic class SeanceUtils {    @Autowired    private SeanceServiceImpl seanceService;    @Autowired    private MovieService movieService;    public boolean isValidToCreateSeance(Seance seance) {        List<Seance> allSeances = seanceService.findAllSeanceByDate(seance.getSeanceDate(), seance.getHallNumber().getHallNumber());        Date newSeance = seance.getSeanceTime();        for (Seance item : allSeances) {            Date seanceStarts = item.getSeanceTime();            Date seanceEnd = addMinutesToDate(Long.parseLong(item.getMovieId().getLength()) + 29, item.getSeanceTime());            if (seanceStarts.getTime() <= newSeance.getTime()                    && newSeance.getTime() <= seanceEnd.getTime()) {                return false;            }        }        return true;    }    private static Date addMinutesToDate(long minutes, Date beforeTime) {        final long ONE_MINUTE_IN_MILLIS = 60000;        long curTimeInMs = beforeTime.getTime();        Date afterAddingMins = new Date(curTimeInMs + (minutes * ONE_MINUTE_IN_MILLIS));        return afterAddingMins;    }    public List<Seance> sort(SortModel sortModel) {        List<Seance> seanceList = null;        Integer movieID = sortModel.getTitle() != null ? movieService.getMovieIdByTitle(sortModel.getTitle()) : null;        if (sortModel.getTitle() != null && sortModel.getTitle().length() != 0) {            seanceList = seanceService.sortSeances(movieID);        } else {            seanceList = seanceService.sortSeances();        }        System.out.println("FROM: " + sortModel.getDateFrom());        System.out.println("TO:" + sortModel.getDateTo());        seanceList = sortDateBefore(seanceList, sortModel);        seanceList = sortDateAfter(seanceList, sortModel);        return seanceList;    }    private List<Seance> sortDateBefore(List<Seance> seanceList, SortModel sortModel) {        List<Seance> newSeanceList = new ArrayList<>();        if (sortModel.getDateFrom() != null) {            for (Seance seance : seanceList) {                if (sortModel.getDateFrom().before(seance.getSeanceDate())) {                    newSeanceList.add(seance);                }            }            return newSeanceList;        } else {            return seanceList;        }    }    private List<Seance> sortDateAfter(List<Seance> seanceList, SortModel sortModel) {        List<Seance> newSeanceList = new ArrayList<>();        System.out.println("TO: " + sortModel.getDateTo());        if (sortModel.getDateTo() != null) {            for (Seance seance : seanceList) {                if (sortModel.getDateTo().after(seance.getSeanceDate())) {                    newSeanceList.add(seance);                }            }            return newSeanceList;        } else {            return seanceList;        }    }}