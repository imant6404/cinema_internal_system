package com.example.course_work_cinema.dao;import com.example.course_work_cinema.entity.Seance;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Query;import java.util.Date;import java.util.List;public interface SeanceRepository extends JpaRepository<Seance, Integer> {    @Query(value = "select * from seance where seance.seance_date = ?1 " +            "AND seance.hall_number = ?2", nativeQuery = true)    List<Seance> findAllSeanceByDate(Date date, Integer hallNumber);    @Query(value = "select * from seance", nativeQuery = true)    List<Seance> sortSeances();    /*@Query(value = "select * from seance where seance.movie_id = ?1", nativeQuery = true)    List<Seance> sortSeances(Integer movieId);*/    /*@Query(value = "select * from seance case when seance.movie_id is null then is not null else seance.movie_id = ?1", nativeQuery = true)    List<Seance> sortSeances(Integer movieId);*/    /*@Query(value = "select * from seance where (seance.movie_id is null then is not null else seance.movie_id = ?1)", nativeQuery = true)    List<Seance> sortSeances(Integer movieId);*/    @Query(value = "SELECT * FROM seance s WHERE (:movieId is null or s.movie_id = :movieId)", nativeQuery = true)    List<Seance> sortSeances(Integer movieId);    /*@Query("SELECT c FROM seance c WHERE (:name is null or c.name = :name) and (:email is null"            + " or c.email = :email)")    List<Seance> sortSeances1(Integer movieId);*//*em.createQuery( "SELECT o FROM Person o where (o.address.id IS NULL OR o.address.id = 0").setMaxResults(50).getResultList();    SELECT    CASE WHEN expression IS NULL    THEN replacement    ELSE expression    END AS column_alias;*/}